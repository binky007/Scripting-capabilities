local Signal = {}
local Dis = {}
Signal.__index = Signal
Dis.__index = Dis

function Signal.New()
	return setmetatable( {
		Callbacks = {},
	} , Signal )
end

function Dis:Disconnect()
	local Callbacks = self.Info.Callbacks
	Callbacks[self.Index] = nil
end

function Signal:Connect(Func)
	local Callbacks = self.Callbacks
	local CallbackCount = #Callbacks
	local Index = CallbackCount + 1
	Callbacks[Index] = Func
	return setmetatable( {
		["Info"] = self,
		["Index"] = Index
	} , Dis )
end

function Signal:Wait()
	local Thread, Connection = coroutine.running()
	Connection = self:Connect(function(...)
		Connection:Disconnect()
		Connection = nil
		coroutine.resume(Thread, ...)
	end)
	return coroutine.yield(Thread)
end

function Signal:Fire(...)
	local Callbacks = self.Callbacks
	local Args = {...}
	for _, Callback in ipairs(Callbacks) do
		coroutine.wrap(function()
			local _ = type(Callback) == "function" or error("Not a function")
			Callback(unpack(Args))
		end)()
	end

end

return Signal
